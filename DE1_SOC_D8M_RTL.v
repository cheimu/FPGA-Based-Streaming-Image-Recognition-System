
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC_D8M_RTL(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		    [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_1, GPIO_1 connect to D8M-GPIO //////////
	output 		          		CAMERA_I2C_SCL,
	inout 		          		CAMERA_I2C_SDA,
	output		          		CAMERA_PWDN_n,
	output		          		MIPI_CS_n,
	inout 		          		MIPI_I2C_SCL,
	inout 		          		MIPI_I2C_SDA,
	output		          		MIPI_MCLK,
	input 		          		MIPI_PIXEL_CLK,
	input 		     [9:0]		MIPI_PIXEL_D,
	input 		          		MIPI_PIXEL_HS,
	input 		          		MIPI_PIXEL_VS,
	output		          		MIPI_REFCLK,
	output		          		MIPI_RESET_n,
	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO 	
	
);
//=============================================================================
// REG/WIRE declarations
//=============================================================================


wire	[15:0]SDRAM_RD_DATA;
wire			DLY_RST_0;
wire			DLY_RST_1;
wire			DLY_RST_2;

wire			SDRAM_CTRL_CLK;
wire        D8M_CK_HZ ; 
wire        D8M_CK_HZ2 ; 
wire        D8M_CK_HZ3 ; 

wire [7:0] RED   ; 
wire [7:0] GREEN  ; 
wire [7:0] BLUE 		 ; 
wire [12:0] VGA_H_CNT;			
wire [12:0] VGA_V_CNT;	

wire        READ_Request ;
wire 	[7:0] B_AUTO;
wire 	[7:0] G_AUTO;
wire 	[7:0] R_AUTO;
wire 	[7:0] B_AUTO_T; // Temp variables so that we can compute grayscale
wire 	[7:0] G_AUTO_T;
wire 	[7:0] R_AUTO_T;
wire  [9:0] GRAYSCALE; // Compute grayscale by ( R + 2 G + B ) / 4
wire        RESET_N  ; 

wire        I2C_RELEASE ;  
wire        AUTO_FOC ; 
wire        CAMERA_I2C_SCL_MIPI ; 
wire        CAMERA_I2C_SCL_AF;
wire        CAMERA_MIPI_RELAESE ;
wire        MIPI_BRIDGE_RELEASE ;  
 
wire        LUT_MIPI_PIXEL_HS;
wire        LUT_MIPI_PIXEL_VS;
wire [9:0]  LUT_MIPI_PIXEL_D  ;
wire        MIPI_PIXEL_CLK_; 
wire [9:0]  PCK;

// Mux output variables
wire [9:0] my_wr1_data;
wire my_wr1;
wire [22:0] my_wr1_addr;
wire [3:0] my_wr1_frame_num;
wire my_wr1_clk;

wire my_rd1;
wire my_rd1_clk;
wire [22:0] my_rd1_addr;
wire [3:0] my_rd1_frame_num;

wire [1:0] sdram_controller_state;

// COPY state variables
wire copy_finished;
wire copy_module_reset, copy_module_rd_en, copy_module_wr_en;
wire [9:0] copy_module_rd_data;
wire [7:0] copy_module_wr_data;

// CONV state variables
wire [9:0] my_conv_wr_data;
wire [9:0] my_conv_rd_data;
wire my_conv_wr_en;
wire my_conv_rd_en;
wire my_conv_clk;
wire my_conv_reset;
wire conv_finished;


// VGA state variables
wire [7:0] R_FINAL, G_FINAL, B_FINAL;

//=======================================================
// Structural coding
//=======================================================
//--INPU MIPI-PIXEL-CLOCK DELAY
CLOCK_DELAY  del1(  .iCLK (MIPI_PIXEL_CLK),  .oCLK (MIPI_PIXEL_CLK_ ) );


assign LUT_MIPI_PIXEL_HS=MIPI_PIXEL_HS;
assign LUT_MIPI_PIXEL_VS=MIPI_PIXEL_VS;
assign LUT_MIPI_PIXEL_D =MIPI_PIXEL_D ;

//------UART OFF --
assign UART_RTS =0; 
assign UART_TXD =0; 
//------HEX OFF --
assign HEX2           = 7'h7F;
assign HEX3           = 7'h7F;
assign HEX4           = 7'h7F;
assign HEX5           = 7'h7F;

//------ MIPI BRIGE & CAMERA RESET  --
assign CAMERA_PWDN_n  = 1; 
assign MIPI_CS_n      = 0; 
assign MIPI_RESET_n   = RESET_N ;

//------ CAMERA MODULE I2C SWITCH  --
assign I2C_RELEASE    = CAMERA_MIPI_RELAESE & MIPI_BRIDGE_RELEASE; 
assign CAMERA_I2C_SCL =( I2C_RELEASE  )?  CAMERA_I2C_SCL_AF  : CAMERA_I2C_SCL_MIPI ;   

//----- RESET RELAY  --		
RESET_DELAY			u2	(	
							.iRST  ( KEY[0] ),
                     .iCLK  ( CLOCK2_50 ),
							.oRST_0( DLY_RST_0 ),
							.oRST_1( DLY_RST_1 ),
							.oRST_2( DLY_RST_2 ),					
						   .oREADY( RESET_N)  
							
						);

//------ MIPI BRIGE & CAMERA SETTING  --  
MIPI_BRIDGE_CAMERA_Config    cfin(
                      .RESET_N           ( RESET_N ), 
                      .CLK_50            ( CLOCK2_50 ), 
                      .MIPI_I2C_SCL      ( MIPI_I2C_SCL ), 
                      .MIPI_I2C_SDA      ( MIPI_I2C_SDA ), 
                      .MIPI_I2C_RELEASE  ( MIPI_BRIDGE_RELEASE ),  
                      .CAMERA_I2C_SCL    ( CAMERA_I2C_SCL_MIPI ),
                      .CAMERA_I2C_SDA    ( CAMERA_I2C_SDA ),
                      .CAMERA_I2C_RELAESE( CAMERA_MIPI_RELAESE )
             );
				 
//------MIPI REF CLOCK  --
pll_test pll_ref(
	                   .inclk0 ( CLOCK3_50 ),
	                   .areset ( ~KEY[0]   ),
	                   .c0( MIPI_REFCLK    ) //20Mhz

    );

//------SDRAM CLOCK GENNERATOR  --
sdram_pll u6(
		               .areset( 0 ) ,     
		               .inclk0( CLOCK_50 ),              
		               .c1    ( DRAM_CLK ),       //100MHZ   -90 degree
		               .c0    ( SDRAM_CTRL_CLK )  //100MHZ     0 degree 							
		              
	               );					

// camera logic variables
wire cam_frame_complete;
wire [1:0] cam_state;
assign LEDR[1:0] = cam_state;
camera_frame_monitor cam_monitor(MIPI_PIXEL_CLK_, ~KEY[0], (~KEY[2]|conv_complete), cam_frame_complete, LUT_MIPI_PIXEL_VS, cam_state);

wire [7:0] sdram_conv_data, sdram_vga_data;

/************************************
 Convolution Module
************************************/
wire conv_complete; // true when VGA can start to read from SDRAM
wire conv_request;
wire [7:0] conv_out_data;
wire conv_data_valid;

square_convolution s_convolver(
	MIPI_PIXEL_CLK_, !cam_frame_complete,
	conv_request, conv_data_valid, conv_complete,
	sdram_conv_data[7:0],
	conv_out_data, SW[1:0], SW[2]);

wire my_read_enable, dummy_read_enable, my_write_enable;
wire [7:0] my_write_data;
wire [9:0] x, y;
wire [9:0] pixel_x; // outputs from VGA
wire [8:0] pixel_y; // outputs from VGA
wire [7:0] iRGB;
wire [7:0] sdram_rd_data;
wire yield; // vga monitor needs to finish frame

frame_display frame_controller(
	CLOCK_50,
	DLY_RST_2,
	1,
	yield,
/*******************************************************************************
												SDRAM IO
*******************************************************************************/
	my_read_enable,
	sdram_vga_data[7:0],
/*******************************************************************************
												VGA IO
*******************************************************************************/
	VGA_R,
	VGA_G,
	VGA_B,
	VGA_BLANK_N,
	VGA_CLK,
	VGA_HS,
	VGA_SYNC_N,
	VGA_VS
);
/*
// Writes a BW image of 4 squares to SDRAM
sdram_pixel_tester frame_writer(
	CLOCK_50, !DLY_RST_2,
	my_write_enable, my_write_finished,
	my_write_data);
*/
assign LEDR[9] = my_read_enable;
assign LEDR[8] = conv_complete;
assign LEDR[7] = cam_frame_complete;
// read/write to first frame
assign my_wr1_frame_num = 0;
assign my_rd1_frame_num = 0;

raw_2_grayscale_filter gray_filter(
	MIPI_PIXEL_CLK_, 0, LUT_MIPI_PIXEL_HS & LUT_MIPI_PIXEL_VS,
	LUT_MIPI_PIXEL_D[9:0],
	GRAYSCALE[7:0]
	);

//------SDRAM CONTROLLER --
Sdram_Control	   u7	(	//	HOST Side						
						   .RESET_N     ( KEY[0] ),
							.CLK         ( SDRAM_CTRL_CLK ) , 
							//	FIFO Write Side 1 (CAM)
							.WR1_DATA    ( GRAYSCALE[7:0] ),
							.WR1         ( !cam_frame_complete & LUT_MIPI_PIXEL_HS & LUT_MIPI_PIXEL_VS ),
							.WR1_ADDR    ( (0)*640*480 ),
                     .WR1_MAX_ADDR( (1)*640*480 ),
						   .WR1_LENGTH  ( 256 ) , 
		               .WR1_LOAD    ( !DLY_RST_0 ),
							.WR1_CLK     ( MIPI_PIXEL_CLK_ ),
							 
							//	FIFO Write Side 2 (CONV)
							.WR2_DATA    ( conv_out_data ),
							.WR2         ( conv_data_valid ),
							.WR2_ADDR    ( (1)*640*480 ),
                     .WR2_MAX_ADDR( (2)*640*480 ),
						   .WR2_LENGTH  ( 256 ) , 
		               .WR2_LOAD    ( !DLY_RST_0 ),
							.WR2_CLK     ( MIPI_PIXEL_CLK_ ),
							
                     //	FIFO Read Side 1 (CONV)
						   .RD1_DATA    ( sdram_conv_data[7:0] ),
				        	.RD1         ( conv_request ),
				        	.RD1_ADDR    ( (0)*640*480 ),
                     .RD1_MAX_ADDR( (1)*640*480 ),
							.RD1_LENGTH  ( 256  ),
							.RD1_LOAD    ( !DLY_RST_1 ),
							.RD1_CLK     ( MIPI_PIXEL_CLK_ ),
							
							//	FIFO Read Side 2 (VGA)
						   .RD2_DATA    ( sdram_vga_data[7:0] ),
				        	.RD2         ( my_read_enable ),
				        	.RD2_ADDR    ( (1)*640*480),
                     .RD2_MAX_ADDR( (2)*640*480 ),
							.RD2_LENGTH  ( 256 ),
							.RD2_LOAD    ( !DLY_RST_1 ),
							.RD2_CLK     ( CLOCK_50 ),
							
							//	SDRAM Side
						   .SA          ( DRAM_ADDR ),
							.BA          ( DRAM_BA ),
							.CS_N        ( DRAM_CS_N ),
							.CKE         ( DRAM_CKE ),
							.RAS_N       ( DRAM_RAS_N ),
							.CAS_N       ( DRAM_CAS_N ),
							.WE_N        ( DRAM_WE_N ),
							.DQ          ( DRAM_DQ ),
							.DQM         ( DRAM_DQM )
						   );

//------AOTO FOCUS ENABLE  --
AUTO_FOCUS_ON  vd( 
                      .CLK_50      ( CLOCK2_50 ), 
                      .I2C_RELEASE ( I2C_RELEASE ), 
                      .AUTO_FOC    ( AUTO_FOC )
               ) ;
					
/*****************************************************
//------ AUTO FOCUS MODULES --
*****************************************************/

// WIRES
wire VGA_CLK_TRIG, VGA_HS_TRIG, VGA_VS_TRIG;
wire [15:0] H_Cont_TRIG, V_Cont_Trig;
wire [7:0] sCCD_R, sCCD_G, sCCD_B, VGA_R_A_TRIG, VGA_G_A_TRIG, VGA_B_A_TRIG;

//--- D8M RAWDATA to RGB ---
D8M_SET   ccd (
	.RESET_SYS_N  ( RESET_N ),
   .CLOCK_50     ( CLOCK2_50      ),
	.CCD_DATA     ( LUT_MIPI_PIXEL_D [9:0]) ,
	.CCD_FVAL     ( LUT_MIPI_PIXEL_VS ), //60HZ
	.CCD_LVAL	  ( LUT_MIPI_PIXEL_HS ), // 
	.CCD_PIXCLK   ( MIPI_PIXEL_CLK_), //25MHZ
	.READ_EN      (READ_Request) , 	
   .VGA_CLK      ( VGA_CLK_TRIG),
   .VGA_HS       ( VGA_HS_TRIG ),
   .VGA_VS       ( VGA_VS_TRIG ),	
	.X_Cont       ( H_Cont_TRIG),  
   .Y_Cont       ( V_Cont_TRIG),   
   .sCCD_R       ( sCCD_R ),
   .sCCD_G       ( sCCD_G ),
   .sCCD_B       ( sCCD_B )
);


//--- By Trigged VGA Controller --  


VGA_Controller_trig	u1	(	
	  .iCLK       (  MIPI_PIXEL_CLK_ ), 
     .H_Cont(H_Cont_TRIG),  
     .V_Cont(V_Cont_TRIG),  
	  .READ_Request(READ_Request)	 , 	  
     .iRed       ( sCCD_R[7:0]   ),
	  .iGreen     ( sCCD_G[7:0]   ),
	  .iBlue      ( sCCD_B[7:0]   ),
	  	
		
	  .oVGA_R     ( VGA_R_A_TRIG ),
	  .oVGA_G     ( VGA_G_A_TRIG ),
	  .oVGA_B     ( VGA_B_A_TRIG ),
     .oVGA_H_SYNC( VGA_HS_TRIG ),
     .oVGA_V_SYNC( VGA_VS_TRIG ),	  
	  .oVGA_SYNC  ( VGA_SYNC_N_TRIG  ),
	  .oVGA_BLANK ( VGA_BLANK_N_TRIG ),
	  .oVGA_CLOCK ( VGA_CLK_TRIG     ),
	  .iRST_N     ( RESET_N )	,	

);
FOCUS_ADJ adl(
                      .CLK_50        ( CLOCK2_50 ) , 
                      .RESET_N       ( I2C_RELEASE ), 
                      .RESET_SUB_N   ( I2C_RELEASE ), 
                      .AUTO_FOC      ( KEY[3] & AUTO_FOC ), 
                      .SW_Y          ( 0 ),
                      .SW_H_FREQ     ( 0 ),   
                      .SW_FUC_LINE   ( SW[3] ),   
                      .SW_FUC_ALL_CEN( SW[3] ),
                      .VIDEO_HS      ( VGA_HS ),
                      .VIDEO_VS      ( VGA_VS ),
                      .VIDEO_CLK     ( VGA_CLK ),
		                .VIDEO_DE      (READ_Request) ,
                      .iR            ( VGA_R_A_TRIG ), 
                      .iG            ( VGA_G_A_TRIG ), 
                      .iB            ( VGA_B_A_TRIG ), 
                      .oR            (  ) , 
                      .oG            (  ) , 
                      .oB            (  ) , 
                      
                      .READY         ( READY ),
                      .SCL           ( CAMERA_I2C_SCL_AF ), 
                      .SDA           ( CAMERA_I2C_SDA )
);

//------VS FREQUENCY TEST = 60HZ --
							
FpsMonitor uFps( 
	   .clk50    ( CLOCK2_50 ),
	   .vs       ( LUT_MIPI_PIXEL_VS ),
	
	   .fps      (),
	   .hex_fps_h( HEX1 ),
	   .hex_fps_l( HEX0 )
);

/*
//--LED DISPLAY--
CLOCKMEM  ck1 ( .CLK(VGA_CLK )   ,.CLK_FREQ  (25000000  ) , . CK_1HZ (D8M_CK_HZ   )  )        ;//25MHZ
CLOCKMEM  ck2 ( .CLK(MIPI_REFCLK   )   ,.CLK_FREQ  (20000000   ) , . CK_1HZ (D8M_CK_HZ2  )  ) ;//20MHZ
CLOCKMEM  ck3 ( .CLK(MIPI_PIXEL_CLK_)   ,.CLK_FREQ  (25000000  ) , . CK_1HZ (D8M_CK_HZ3  )  )  ;//25MHZ
*/

//assign LEDR = { D8M_CK_HZ ,D8M_CK_HZ2,D8M_CK_HZ3 , conv_finished, cam_state, sdram_controller_state, CAMERA_MIPI_RELAESE ,MIPI_BRIDGE_RELEASE  } ; 


endmodule
